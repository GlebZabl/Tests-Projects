Задача звучит следующим образом:
  Задача написать приложение, работающее с redis, умеющее как генерировать сообщения, так и
обрабатывать. Параллельно может быть запущено сколько угодно приложений.
Обмен любой информацией между приложениями осуществлять только через redis.
Все запущенные копии приложения кроме генератора, являются обработчиками сообщений и в
любой момент готовы получить сообщение из redis.
Все сообщения должны быть обработаны, причём только один раз, только одним из обработчиков.
Генератором должно быть только одно из запущенных приложений. Т.е. каждое приложение может
стать генератором. Но в любой момент времени может работать только один генератор.
Если текущий генератор завершить принудительно (обработчик завершения запрещен, например,
выключили из розетки), то одно из приложений должно заменить завершённое (упавшее) и стать
генератором. Для определения кто генератор нельзя использовать средства ОС, считается что все
приложения запущенны на разных серверах и общаются только через redis.
Сообщения генерируются раз в 500 мс.
Для генерации сообщения использовать любую функцию с рандомным текстовым ответом.
Приложение, получая сообщение, с вероятностью 5% определяет, что сообщение содержит
ошибку. Если сообщение содержит ошибку, то сообщение следует поместить в redis для дальнейшего
изучения. Если приложение запустить с параметром 'getErrors', то оно заберет из redis все сообщения с
ошибкой, выведет их на экран и завершится, при этом из базы сообщения удаляются.

Обоснование решения:
  я применил следующий алгоритм: для того чтоб каждое сообщение было обработано только 1 раз очень удобно использовать очереди,
но откуда обработчики узнают что в очереди появились новые задания? опрашивать её в бесконечном цикле не вариант. Поэтому мной
было принято решение использовать канал для оповещения о появлении нового сообщения. В результате получается что генератор кладёт
сообщение в очередь и публикует в канал оповещение, обработчики слушают канал и при получении оповещения проверяют очередь на наличае 
новых сообщений. В результате каждое сообщение обрабатывается 1 раз. Если обработчик не получают сообщений из канала в течении
определённого времени он переходят в режим выборов. Алгоритм выборов простой: каждый обработчик после небольшой задержки(для 
синхронизации) отсылает в канал своё уникальное имя(см. uuid), так продолжается некоторое время, меньшее чем время ожидания получения 
сообщения(если новый обработчик включится во время выборов то к моменту их окончания он всё еще будет ждать сообщение от гениратора) 
тот кто за это время отослал большее значение переходит в режим генератора.

Случайности:
  Как сообщение разрешено использовать любую рандомную ф-ию поэтому для наглядности каждое сообщение будет содержать в себе номер 
генератора, отправившего его и номер этого сообщения среди всех отправленных генератором.
  В качестве ф-ии определяющий ошибку с 5ти процентной вероятностью будет ф-ия получения рандомного числа от 0 до 19 и затем сравнение 
его(этого числа) с нулём

Таймауты:
  таймаут на ожидания сообщения-600мс (100мс запас на различные системные задержки)
  таймаут на ожидание первого сообщения после включения(6с, за которое обработчик переходит в режим генератора, проверяет соединение и тд)
  таймаут на проведение выборов(500мс)
  таймаут от начала проведения выборов до отправки кандидатуры(100мс) нужен для того чтоб все участники выборов успали начать 
 слушать канал

Подводные камни:
  представим ситуацию что долгое время работало только 1 приложение, оно сразу перешло в режим генератора,значит было сгенерированно 
большое кол-во сообщений, поэтому когда подключится обработчик ему необходимо брать не 1 сообщение на 1 сигнал, а все находящиеся в
очереди.Тогда нужно убедится что данной очередью в редисе пользуются только наши приложения . Теперь всё хорошо, все сообщения 
обрабатываются,каждое только одним обработчиком.

Настройка конфигурации:
  в файде в той же папке что и финальный исполняемый файл должен находиться файл config.txt(в репозитории есть пример файла), он заполняется следующим образом
первая строка - строка подключения к редису(например localhost:6379)
вторая строка - название очереди сообщений
третья строка - название очереди ошибок
четвёртая строка - название канала для оповещения обработчиков о новых сообщениях
пятая строка - название канала для проведения выборов
